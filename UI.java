/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package not.defteri;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author ardas
 */
public class UI extends javax.swing.JFrame {
    static DefaultListModel model = new DefaultListModel();
    private String kullanici_adi = "root";
    private String parola = "";
    
    public String guncelle_title;
    public String guncelle_note;
    
    private String db_name = "notdefteri";
    
    public String title;
    
    public String note;
    
    private String host = "localhost";
    
    private int port = 3306;
    
    private static Connection con;
    
    private static Statement statement = null;
    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
        not_listesi.setModel(model);
        
        String url = "jdbc:mysql://" + host + ":" + port + "/" + db_name + "?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
        
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mysql://localhost:3306/notdefteri","root","");  
            System.out.println("Bağlantı başarılı...");
        } catch (ClassNotFoundException ex) {
            System.out.println("Driver bulunamadı...");
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        String sorgu = "SELECT * FROM notlar";
        
        try {
            statement = con.createStatement();
            
            ResultSet rs = statement.executeQuery(sorgu);
            
            while(rs.next()){
                String title_data = rs.getString("title");
                
                model.addElement(title_data);
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        not_ekle = new javax.swing.JButton();
        not_ac = new javax.swing.JButton();
        not_sil = new javax.swing.JButton();
        not_listesi = new javax.swing.JList<>();
        not_guncelle = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        not_ekle.setText("Not Ekle");
        not_ekle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                not_ekleActionPerformed(evt);
            }
        });

        not_ac.setText("Not Aç");
        not_ac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                not_acActionPerformed(evt);
            }
        });

        not_sil.setText("Not Sil");
        not_sil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                not_silActionPerformed(evt);
            }
        });

        not_guncelle.setText("Not Güncelle");
        not_guncelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                not_guncelleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(not_ekle, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(not_guncelle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(not_ac, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(not_sil, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(not_listesi, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(not_guncelle)
                    .addComponent(not_ekle)
                    .addComponent(not_ac)
                    .addComponent(not_sil))
                .addGap(18, 18, 18)
                .addComponent(not_listesi, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public static void notGuncelle(int index, String old_title, String new_title, String note){
        try {
            String sorgu = "UPDATE notlar SET title = '"+new_title+"', note = '"+note+"' WHERE title = '"+old_title+"'";
            statement = con.createStatement();
            statement.executeUpdate(sorgu);
            model.setElementAt(new_title, index);
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
                
    }
    public static void notEkle(String title, String note){
        try {
            model.addElement(title);
            statement=con.createStatement();
            String sorgu = "INSERT INTO notlar (title,note) VALUES('"+title+"','"+note+"')";
            statement.executeUpdate(sorgu);
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void not_acActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_not_acActionPerformed
        
        String chosen_title = not_listesi.getSelectedValue();
        
        if(chosen_title == null){
            if(model.getSize()==0){
                JOptionPane.showMessageDialog(this, "Not Listesi Boş.");
            }
            else{
                JOptionPane.showMessageDialog(this, "Lütfen başlık seçiniz.");
            }
        }
        else{
            String sorgu = "SELECT * FROM notlar WHERE title = '"+chosen_title+"'";
            try {
            statement = con.createStatement();
            
            ResultSet rs = statement.executeQuery(sorgu);
            
            while(rs.next()){
                title = rs.getString("title");
                note = rs.getString("note");
            }
            NotAcUI notac = new NotAcUI(title,note);
            notac.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_not_acActionPerformed

    private void not_ekleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_not_ekleActionPerformed
        NotEkleUI notekle = new NotEkleUI(0,"ekle","","","");
        notekle.setVisible(true);
    }//GEN-LAST:event_not_ekleActionPerformed

    private void not_silActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_not_silActionPerformed
        
        String chosen_title = not_listesi.getSelectedValue();
        if(chosen_title == null){
            if(model.getSize()==0){
                JOptionPane.showMessageDialog(this, "Not Listesi Boş.");
            }
            else{
                JOptionPane.showMessageDialog(this, "Lütfen başlık seçiniz.");
            }
        }
        else{
            try {
                model.removeElement(chosen_title);
                statement = con.createStatement();
                String sorgu = "DELETE FROM notlar WHERE title = '"+chosen_title+"'";
                
                statement.executeUpdate(sorgu);
            } catch (SQLException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_not_silActionPerformed

    private void not_guncelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_not_guncelleActionPerformed
        String chosen_item = not_listesi.getSelectedValue();
        int chosen_index = not_listesi.getSelectedIndex();
        if(chosen_item == null){
            if(model.getSize()==0){
                JOptionPane.showMessageDialog(this, "Not Listesi Boş.");
            }
            else{
                JOptionPane.showMessageDialog(this, "Lütfen başlık seçiniz.");
            }
        }
        else{
            try {
                String sorgu = "SELECT * FROM notlar WHERE title = '" + chosen_item+"'";
                statement = con.createStatement();
                
                ResultSet rs = statement.executeQuery(sorgu);
            
                while(rs.next()){
                    guncelle_title = rs.getString("title");
                    guncelle_note = rs.getString("note");
                    
                   
                
                }
                NotEkleUI notguncelle = new NotEkleUI(chosen_index,"güncelle",chosen_item,guncelle_title,guncelle_note);
                notguncelle.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_not_guncelleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton not_ac;
    private javax.swing.JButton not_ekle;
    private javax.swing.JButton not_guncelle;
    private javax.swing.JList<String> not_listesi;
    private javax.swing.JButton not_sil;
    // End of variables declaration//GEN-END:variables
}
